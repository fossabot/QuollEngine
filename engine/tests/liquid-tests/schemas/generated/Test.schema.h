// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_LIQUID_SCHEMAS_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_LIQUID_SCHEMAS_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace liquid {
namespace schemas {
namespace test {

struct Test;
struct TestBuilder;

struct Test FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VERSION = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_VERSION, 4) &&
           verifier.EndTable();
  }
};

struct TestBuilder {
  typedef Test Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Test::VT_NAME, name);
  }
  void add_version(uint32_t version) {
    fbb_.AddElement<uint32_t>(Test::VT_VERSION, version, 0);
  }
  explicit TestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Test>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Test> CreateTest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint32_t version = 0) {
  TestBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Test> CreateTestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t version = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return liquid::schemas::test::CreateTest(
      _fbb,
      name__,
      version);
}

inline const liquid::schemas::test::Test *GetTest(const void *buf) {
  return ::flatbuffers::GetRoot<liquid::schemas::test::Test>(buf);
}

inline const liquid::schemas::test::Test *GetSizePrefixedTest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<liquid::schemas::test::Test>(buf);
}

inline bool VerifyTestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<liquid::schemas::test::Test>(nullptr);
}

inline bool VerifySizePrefixedTestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<liquid::schemas::test::Test>(nullptr);
}

inline void FinishTestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<liquid::schemas::test::Test> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<liquid::schemas::test::Test> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace test
}  // namespace schemas
}  // namespace liquid

#endif  // FLATBUFFERS_GENERATED_TEST_LIQUID_SCHEMAS_TEST_H_
