// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENVIRONMENT_LIQUID_SCHEMAS_ASSET_H_
#define FLATBUFFERS_GENERATED_ENVIRONMENT_LIQUID_SCHEMAS_ASSET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "Base.schema.h"

namespace liquid {
namespace schemas {
namespace asset {

struct Environment;
struct EnvironmentBuilder;

struct Environment FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EnvironmentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IRRADIANCE_MAP = 4,
    VT_SPECULAR_MAP = 6
  };
  const ::flatbuffers::String *irradiance_map() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IRRADIANCE_MAP);
  }
  const ::flatbuffers::String *specular_map() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPECULAR_MAP);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_IRRADIANCE_MAP) &&
           verifier.VerifyString(irradiance_map()) &&
           VerifyOffsetRequired(verifier, VT_SPECULAR_MAP) &&
           verifier.VerifyString(specular_map()) &&
           verifier.EndTable();
  }
};

struct EnvironmentBuilder {
  typedef Environment Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_irradiance_map(::flatbuffers::Offset<::flatbuffers::String> irradiance_map) {
    fbb_.AddOffset(Environment::VT_IRRADIANCE_MAP, irradiance_map);
  }
  void add_specular_map(::flatbuffers::Offset<::flatbuffers::String> specular_map) {
    fbb_.AddOffset(Environment::VT_SPECULAR_MAP, specular_map);
  }
  explicit EnvironmentBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Environment> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Environment>(end);
    fbb_.Required(o, Environment::VT_IRRADIANCE_MAP);
    fbb_.Required(o, Environment::VT_SPECULAR_MAP);
    return o;
  }
};

inline ::flatbuffers::Offset<Environment> CreateEnvironment(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> irradiance_map = 0,
    ::flatbuffers::Offset<::flatbuffers::String> specular_map = 0) {
  EnvironmentBuilder builder_(_fbb);
  builder_.add_specular_map(specular_map);
  builder_.add_irradiance_map(irradiance_map);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Environment> CreateEnvironmentDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *irradiance_map = nullptr,
    const char *specular_map = nullptr) {
  auto irradiance_map__ = irradiance_map ? _fbb.CreateString(irradiance_map) : 0;
  auto specular_map__ = specular_map ? _fbb.CreateString(specular_map) : 0;
  return liquid::schemas::asset::CreateEnvironment(
      _fbb,
      irradiance_map__,
      specular_map__);
}

inline const liquid::schemas::asset::Environment *GetEnvironment(const void *buf) {
  return ::flatbuffers::GetRoot<liquid::schemas::asset::Environment>(buf);
}

inline const liquid::schemas::asset::Environment *GetSizePrefixedEnvironment(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<liquid::schemas::asset::Environment>(buf);
}

inline const char *EnvironmentIdentifier() {
  return "LENV";
}

inline bool EnvironmentBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EnvironmentIdentifier());
}

inline bool SizePrefixedEnvironmentBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EnvironmentIdentifier(), true);
}

inline bool VerifyEnvironmentBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<liquid::schemas::asset::Environment>(EnvironmentIdentifier());
}

inline bool VerifySizePrefixedEnvironmentBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<liquid::schemas::asset::Environment>(EnvironmentIdentifier());
}

inline void FinishEnvironmentBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<liquid::schemas::asset::Environment> root) {
  fbb.Finish(root, EnvironmentIdentifier());
}

inline void FinishSizePrefixedEnvironmentBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<liquid::schemas::asset::Environment> root) {
  fbb.FinishSizePrefixed(root, EnvironmentIdentifier());
}

}  // namespace asset
}  // namespace schemas
}  // namespace liquid

#endif  // FLATBUFFERS_GENERATED_ENVIRONMENT_LIQUID_SCHEMAS_ASSET_H_
