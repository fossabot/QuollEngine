// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATERIAL_LIQUID_SCHEMAS_ASSET_H_
#define FLATBUFFERS_GENERATED_MATERIAL_LIQUID_SCHEMAS_ASSET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "Base.schema.h"

namespace liquid {
namespace schemas {
namespace asset {

struct PBRMetallicRoughness;
struct PBRMetallicRoughnessBuilder;

struct Material;
struct MaterialBuilder;

enum MaterialData : uint8_t {
  MaterialData_NONE = 0,
  MaterialData_PBRMetallicRoughness = 1,
  MaterialData_MIN = MaterialData_NONE,
  MaterialData_MAX = MaterialData_PBRMetallicRoughness
};

inline const MaterialData (&EnumValuesMaterialData())[2] {
  static const MaterialData values[] = {
    MaterialData_NONE,
    MaterialData_PBRMetallicRoughness
  };
  return values;
}

inline const char * const *EnumNamesMaterialData() {
  static const char * const names[3] = {
    "NONE",
    "PBRMetallicRoughness",
    nullptr
  };
  return names;
}

inline const char *EnumNameMaterialData(MaterialData e) {
  if (::flatbuffers::IsOutRange(e, MaterialData_NONE, MaterialData_PBRMetallicRoughness)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMaterialData()[index];
}

template<typename T> struct MaterialDataTraits {
  static const MaterialData enum_value = MaterialData_NONE;
};

template<> struct MaterialDataTraits<liquid::schemas::asset::PBRMetallicRoughness> {
  static const MaterialData enum_value = MaterialData_PBRMetallicRoughness;
};

bool VerifyMaterialData(::flatbuffers::Verifier &verifier, const void *obj, MaterialData type);
bool VerifyMaterialDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct PBRMetallicRoughness FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PBRMetallicRoughnessBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BASE_COLOR_TEXTURE = 4,
    VT_BASE_COLOR_TEXTURE_COORDINATE = 6,
    VT_BASE_COLOR_FACTOR = 8,
    VT_METALLIC_ROUGHNESS_TEXTURE = 10,
    VT_METALLIC_ROUGHNESS_TEXTURE_COORDINATE = 12,
    VT_METALLIC_FACTOR = 14,
    VT_ROUGHNESS_FACTOR = 16,
    VT_NORMAL_TEXTURE = 18,
    VT_NORMAL_TEXTURE_COORDINATE = 20,
    VT_NORMAL_SCALE = 22,
    VT_OCCLUSION_TEXTURE = 24,
    VT_OCCLUSION_TEXTURE_COORDINATE = 26,
    VT_OCCLUSION_STRENGTH = 28,
    VT_EMISSIVE_TEXTURE = 30,
    VT_EMISSIVE_TEXTURE_COORDINATE = 32,
    VT_EMISSIVE_FACTOR = 34
  };
  const ::flatbuffers::String *base_color_texture() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BASE_COLOR_TEXTURE);
  }
  uint8_t base_color_texture_coordinate() const {
    return GetField<uint8_t>(VT_BASE_COLOR_TEXTURE_COORDINATE, 0);
  }
  const liquid::schemas::base::Vec4 *base_color_factor() const {
    return GetStruct<const liquid::schemas::base::Vec4 *>(VT_BASE_COLOR_FACTOR);
  }
  const ::flatbuffers::String *metallic_roughness_texture() const {
    return GetPointer<const ::flatbuffers::String *>(VT_METALLIC_ROUGHNESS_TEXTURE);
  }
  uint8_t metallic_roughness_texture_coordinate() const {
    return GetField<uint8_t>(VT_METALLIC_ROUGHNESS_TEXTURE_COORDINATE, 0);
  }
  float metallic_factor() const {
    return GetField<float>(VT_METALLIC_FACTOR, 0.0f);
  }
  float roughness_factor() const {
    return GetField<float>(VT_ROUGHNESS_FACTOR, 0.0f);
  }
  const ::flatbuffers::String *normal_texture() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NORMAL_TEXTURE);
  }
  uint8_t normal_texture_coordinate() const {
    return GetField<uint8_t>(VT_NORMAL_TEXTURE_COORDINATE, 0);
  }
  float normal_scale() const {
    return GetField<float>(VT_NORMAL_SCALE, 0.0f);
  }
  const ::flatbuffers::String *occlusion_texture() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OCCLUSION_TEXTURE);
  }
  uint8_t occlusion_texture_coordinate() const {
    return GetField<uint8_t>(VT_OCCLUSION_TEXTURE_COORDINATE, 0);
  }
  float occlusion_strength() const {
    return GetField<float>(VT_OCCLUSION_STRENGTH, 0.0f);
  }
  const ::flatbuffers::String *emissive_texture() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EMISSIVE_TEXTURE);
  }
  uint8_t emissive_texture_coordinate() const {
    return GetField<uint8_t>(VT_EMISSIVE_TEXTURE_COORDINATE, 0);
  }
  const liquid::schemas::base::Vec3 *emissive_factor() const {
    return GetStruct<const liquid::schemas::base::Vec3 *>(VT_EMISSIVE_FACTOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BASE_COLOR_TEXTURE) &&
           verifier.VerifyString(base_color_texture()) &&
           VerifyField<uint8_t>(verifier, VT_BASE_COLOR_TEXTURE_COORDINATE, 1) &&
           VerifyField<liquid::schemas::base::Vec4>(verifier, VT_BASE_COLOR_FACTOR, 4) &&
           VerifyOffset(verifier, VT_METALLIC_ROUGHNESS_TEXTURE) &&
           verifier.VerifyString(metallic_roughness_texture()) &&
           VerifyField<uint8_t>(verifier, VT_METALLIC_ROUGHNESS_TEXTURE_COORDINATE, 1) &&
           VerifyField<float>(verifier, VT_METALLIC_FACTOR, 4) &&
           VerifyField<float>(verifier, VT_ROUGHNESS_FACTOR, 4) &&
           VerifyOffset(verifier, VT_NORMAL_TEXTURE) &&
           verifier.VerifyString(normal_texture()) &&
           VerifyField<uint8_t>(verifier, VT_NORMAL_TEXTURE_COORDINATE, 1) &&
           VerifyField<float>(verifier, VT_NORMAL_SCALE, 4) &&
           VerifyOffset(verifier, VT_OCCLUSION_TEXTURE) &&
           verifier.VerifyString(occlusion_texture()) &&
           VerifyField<uint8_t>(verifier, VT_OCCLUSION_TEXTURE_COORDINATE, 1) &&
           VerifyField<float>(verifier, VT_OCCLUSION_STRENGTH, 4) &&
           VerifyOffset(verifier, VT_EMISSIVE_TEXTURE) &&
           verifier.VerifyString(emissive_texture()) &&
           VerifyField<uint8_t>(verifier, VT_EMISSIVE_TEXTURE_COORDINATE, 1) &&
           VerifyField<liquid::schemas::base::Vec3>(verifier, VT_EMISSIVE_FACTOR, 4) &&
           verifier.EndTable();
  }
};

struct PBRMetallicRoughnessBuilder {
  typedef PBRMetallicRoughness Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_base_color_texture(::flatbuffers::Offset<::flatbuffers::String> base_color_texture) {
    fbb_.AddOffset(PBRMetallicRoughness::VT_BASE_COLOR_TEXTURE, base_color_texture);
  }
  void add_base_color_texture_coordinate(uint8_t base_color_texture_coordinate) {
    fbb_.AddElement<uint8_t>(PBRMetallicRoughness::VT_BASE_COLOR_TEXTURE_COORDINATE, base_color_texture_coordinate, 0);
  }
  void add_base_color_factor(const liquid::schemas::base::Vec4 *base_color_factor) {
    fbb_.AddStruct(PBRMetallicRoughness::VT_BASE_COLOR_FACTOR, base_color_factor);
  }
  void add_metallic_roughness_texture(::flatbuffers::Offset<::flatbuffers::String> metallic_roughness_texture) {
    fbb_.AddOffset(PBRMetallicRoughness::VT_METALLIC_ROUGHNESS_TEXTURE, metallic_roughness_texture);
  }
  void add_metallic_roughness_texture_coordinate(uint8_t metallic_roughness_texture_coordinate) {
    fbb_.AddElement<uint8_t>(PBRMetallicRoughness::VT_METALLIC_ROUGHNESS_TEXTURE_COORDINATE, metallic_roughness_texture_coordinate, 0);
  }
  void add_metallic_factor(float metallic_factor) {
    fbb_.AddElement<float>(PBRMetallicRoughness::VT_METALLIC_FACTOR, metallic_factor, 0.0f);
  }
  void add_roughness_factor(float roughness_factor) {
    fbb_.AddElement<float>(PBRMetallicRoughness::VT_ROUGHNESS_FACTOR, roughness_factor, 0.0f);
  }
  void add_normal_texture(::flatbuffers::Offset<::flatbuffers::String> normal_texture) {
    fbb_.AddOffset(PBRMetallicRoughness::VT_NORMAL_TEXTURE, normal_texture);
  }
  void add_normal_texture_coordinate(uint8_t normal_texture_coordinate) {
    fbb_.AddElement<uint8_t>(PBRMetallicRoughness::VT_NORMAL_TEXTURE_COORDINATE, normal_texture_coordinate, 0);
  }
  void add_normal_scale(float normal_scale) {
    fbb_.AddElement<float>(PBRMetallicRoughness::VT_NORMAL_SCALE, normal_scale, 0.0f);
  }
  void add_occlusion_texture(::flatbuffers::Offset<::flatbuffers::String> occlusion_texture) {
    fbb_.AddOffset(PBRMetallicRoughness::VT_OCCLUSION_TEXTURE, occlusion_texture);
  }
  void add_occlusion_texture_coordinate(uint8_t occlusion_texture_coordinate) {
    fbb_.AddElement<uint8_t>(PBRMetallicRoughness::VT_OCCLUSION_TEXTURE_COORDINATE, occlusion_texture_coordinate, 0);
  }
  void add_occlusion_strength(float occlusion_strength) {
    fbb_.AddElement<float>(PBRMetallicRoughness::VT_OCCLUSION_STRENGTH, occlusion_strength, 0.0f);
  }
  void add_emissive_texture(::flatbuffers::Offset<::flatbuffers::String> emissive_texture) {
    fbb_.AddOffset(PBRMetallicRoughness::VT_EMISSIVE_TEXTURE, emissive_texture);
  }
  void add_emissive_texture_coordinate(uint8_t emissive_texture_coordinate) {
    fbb_.AddElement<uint8_t>(PBRMetallicRoughness::VT_EMISSIVE_TEXTURE_COORDINATE, emissive_texture_coordinate, 0);
  }
  void add_emissive_factor(const liquid::schemas::base::Vec3 *emissive_factor) {
    fbb_.AddStruct(PBRMetallicRoughness::VT_EMISSIVE_FACTOR, emissive_factor);
  }
  explicit PBRMetallicRoughnessBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PBRMetallicRoughness> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PBRMetallicRoughness>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PBRMetallicRoughness> CreatePBRMetallicRoughness(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> base_color_texture = 0,
    uint8_t base_color_texture_coordinate = 0,
    const liquid::schemas::base::Vec4 *base_color_factor = nullptr,
    ::flatbuffers::Offset<::flatbuffers::String> metallic_roughness_texture = 0,
    uint8_t metallic_roughness_texture_coordinate = 0,
    float metallic_factor = 0.0f,
    float roughness_factor = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> normal_texture = 0,
    uint8_t normal_texture_coordinate = 0,
    float normal_scale = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> occlusion_texture = 0,
    uint8_t occlusion_texture_coordinate = 0,
    float occlusion_strength = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> emissive_texture = 0,
    uint8_t emissive_texture_coordinate = 0,
    const liquid::schemas::base::Vec3 *emissive_factor = nullptr) {
  PBRMetallicRoughnessBuilder builder_(_fbb);
  builder_.add_emissive_factor(emissive_factor);
  builder_.add_emissive_texture(emissive_texture);
  builder_.add_occlusion_strength(occlusion_strength);
  builder_.add_occlusion_texture(occlusion_texture);
  builder_.add_normal_scale(normal_scale);
  builder_.add_normal_texture(normal_texture);
  builder_.add_roughness_factor(roughness_factor);
  builder_.add_metallic_factor(metallic_factor);
  builder_.add_metallic_roughness_texture(metallic_roughness_texture);
  builder_.add_base_color_factor(base_color_factor);
  builder_.add_base_color_texture(base_color_texture);
  builder_.add_emissive_texture_coordinate(emissive_texture_coordinate);
  builder_.add_occlusion_texture_coordinate(occlusion_texture_coordinate);
  builder_.add_normal_texture_coordinate(normal_texture_coordinate);
  builder_.add_metallic_roughness_texture_coordinate(metallic_roughness_texture_coordinate);
  builder_.add_base_color_texture_coordinate(base_color_texture_coordinate);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PBRMetallicRoughness> CreatePBRMetallicRoughnessDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *base_color_texture = nullptr,
    uint8_t base_color_texture_coordinate = 0,
    const liquid::schemas::base::Vec4 *base_color_factor = nullptr,
    const char *metallic_roughness_texture = nullptr,
    uint8_t metallic_roughness_texture_coordinate = 0,
    float metallic_factor = 0.0f,
    float roughness_factor = 0.0f,
    const char *normal_texture = nullptr,
    uint8_t normal_texture_coordinate = 0,
    float normal_scale = 0.0f,
    const char *occlusion_texture = nullptr,
    uint8_t occlusion_texture_coordinate = 0,
    float occlusion_strength = 0.0f,
    const char *emissive_texture = nullptr,
    uint8_t emissive_texture_coordinate = 0,
    const liquid::schemas::base::Vec3 *emissive_factor = nullptr) {
  auto base_color_texture__ = base_color_texture ? _fbb.CreateString(base_color_texture) : 0;
  auto metallic_roughness_texture__ = metallic_roughness_texture ? _fbb.CreateString(metallic_roughness_texture) : 0;
  auto normal_texture__ = normal_texture ? _fbb.CreateString(normal_texture) : 0;
  auto occlusion_texture__ = occlusion_texture ? _fbb.CreateString(occlusion_texture) : 0;
  auto emissive_texture__ = emissive_texture ? _fbb.CreateString(emissive_texture) : 0;
  return liquid::schemas::asset::CreatePBRMetallicRoughness(
      _fbb,
      base_color_texture__,
      base_color_texture_coordinate,
      base_color_factor,
      metallic_roughness_texture__,
      metallic_roughness_texture_coordinate,
      metallic_factor,
      roughness_factor,
      normal_texture__,
      normal_texture_coordinate,
      normal_scale,
      occlusion_texture__,
      occlusion_texture_coordinate,
      occlusion_strength,
      emissive_texture__,
      emissive_texture_coordinate,
      emissive_factor);
}

struct Material FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MaterialBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA_TYPE = 4,
    VT_DATA = 6
  };
  liquid::schemas::asset::MaterialData data_type() const {
    return static_cast<liquid::schemas::asset::MaterialData>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const liquid::schemas::asset::PBRMetallicRoughness *data_as_PBRMetallicRoughness() const {
    return data_type() == liquid::schemas::asset::MaterialData_PBRMetallicRoughness ? static_cast<const liquid::schemas::asset::PBRMetallicRoughness *>(data()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE, 1) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyMaterialData(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const liquid::schemas::asset::PBRMetallicRoughness *Material::data_as<liquid::schemas::asset::PBRMetallicRoughness>() const {
  return data_as_PBRMetallicRoughness();
}

struct MaterialBuilder {
  typedef Material Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data_type(liquid::schemas::asset::MaterialData data_type) {
    fbb_.AddElement<uint8_t>(Material::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(::flatbuffers::Offset<void> data) {
    fbb_.AddOffset(Material::VT_DATA, data);
  }
  explicit MaterialBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Material> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Material>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Material> CreateMaterial(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    liquid::schemas::asset::MaterialData data_type = liquid::schemas::asset::MaterialData_NONE,
    ::flatbuffers::Offset<void> data = 0) {
  MaterialBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

inline bool VerifyMaterialData(::flatbuffers::Verifier &verifier, const void *obj, MaterialData type) {
  switch (type) {
    case MaterialData_NONE: {
      return true;
    }
    case MaterialData_PBRMetallicRoughness: {
      auto ptr = reinterpret_cast<const liquid::schemas::asset::PBRMetallicRoughness *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMaterialDataVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMaterialData(
        verifier,  values->Get(i), types->GetEnum<MaterialData>(i))) {
      return false;
    }
  }
  return true;
}

inline const liquid::schemas::asset::Material *GetMaterial(const void *buf) {
  return ::flatbuffers::GetRoot<liquid::schemas::asset::Material>(buf);
}

inline const liquid::schemas::asset::Material *GetSizePrefixedMaterial(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<liquid::schemas::asset::Material>(buf);
}

inline const char *MaterialIdentifier() {
  return "LMAT";
}

inline bool MaterialBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MaterialIdentifier());
}

inline bool SizePrefixedMaterialBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MaterialIdentifier(), true);
}

inline bool VerifyMaterialBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<liquid::schemas::asset::Material>(MaterialIdentifier());
}

inline bool VerifySizePrefixedMaterialBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<liquid::schemas::asset::Material>(MaterialIdentifier());
}

inline void FinishMaterialBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<liquid::schemas::asset::Material> root) {
  fbb.Finish(root, MaterialIdentifier());
}

inline void FinishSizePrefixedMaterialBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<liquid::schemas::asset::Material> root) {
  fbb.FinishSizePrefixed(root, MaterialIdentifier());
}

}  // namespace asset
}  // namespace schemas
}  // namespace liquid

#endif  // FLATBUFFERS_GENERATED_MATERIAL_LIQUID_SCHEMAS_ASSET_H_
