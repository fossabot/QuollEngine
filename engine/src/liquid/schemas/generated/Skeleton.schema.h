// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SKELETON_LIQUID_SCHEMAS_ASSET_H_
#define FLATBUFFERS_GENERATED_SKELETON_LIQUID_SCHEMAS_ASSET_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "Base.schema.h"

namespace liquid {
namespace schemas {
namespace asset {

struct Skeleton;
struct SkeletonBuilder;

struct Skeleton FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SkeletonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_JOINT_PARENTS = 4,
    VT_JOINT_POSITIONS = 6,
    VT_JOINT_ROTATIONS = 8,
    VT_JOINT_SCALES = 10,
    VT_JOINT_INVERSE_BIND_MATRICES = 12,
    VT_JOINT_NAMES = 14
  };
  const ::flatbuffers::Vector<uint8_t> *joint_parents() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_JOINT_PARENTS);
  }
  const ::flatbuffers::Vector<const liquid::schemas::base::Vec3 *> *joint_positions() const {
    return GetPointer<const ::flatbuffers::Vector<const liquid::schemas::base::Vec3 *> *>(VT_JOINT_POSITIONS);
  }
  const ::flatbuffers::Vector<const liquid::schemas::base::Quat *> *joint_rotations() const {
    return GetPointer<const ::flatbuffers::Vector<const liquid::schemas::base::Quat *> *>(VT_JOINT_ROTATIONS);
  }
  const ::flatbuffers::Vector<const liquid::schemas::base::Vec3 *> *joint_scales() const {
    return GetPointer<const ::flatbuffers::Vector<const liquid::schemas::base::Vec3 *> *>(VT_JOINT_SCALES);
  }
  const ::flatbuffers::Vector<const liquid::schemas::base::Mat4 *> *joint_inverse_bind_matrices() const {
    return GetPointer<const ::flatbuffers::Vector<const liquid::schemas::base::Mat4 *> *>(VT_JOINT_INVERSE_BIND_MATRICES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *joint_names() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_JOINT_NAMES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_JOINT_PARENTS) &&
           verifier.VerifyVector(joint_parents()) &&
           VerifyOffsetRequired(verifier, VT_JOINT_POSITIONS) &&
           verifier.VerifyVector(joint_positions()) &&
           VerifyOffsetRequired(verifier, VT_JOINT_ROTATIONS) &&
           verifier.VerifyVector(joint_rotations()) &&
           VerifyOffsetRequired(verifier, VT_JOINT_SCALES) &&
           verifier.VerifyVector(joint_scales()) &&
           VerifyOffsetRequired(verifier, VT_JOINT_INVERSE_BIND_MATRICES) &&
           verifier.VerifyVector(joint_inverse_bind_matrices()) &&
           VerifyOffsetRequired(verifier, VT_JOINT_NAMES) &&
           verifier.VerifyVector(joint_names()) &&
           verifier.VerifyVectorOfStrings(joint_names()) &&
           verifier.EndTable();
  }
};

struct SkeletonBuilder {
  typedef Skeleton Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_joint_parents(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> joint_parents) {
    fbb_.AddOffset(Skeleton::VT_JOINT_PARENTS, joint_parents);
  }
  void add_joint_positions(::flatbuffers::Offset<::flatbuffers::Vector<const liquid::schemas::base::Vec3 *>> joint_positions) {
    fbb_.AddOffset(Skeleton::VT_JOINT_POSITIONS, joint_positions);
  }
  void add_joint_rotations(::flatbuffers::Offset<::flatbuffers::Vector<const liquid::schemas::base::Quat *>> joint_rotations) {
    fbb_.AddOffset(Skeleton::VT_JOINT_ROTATIONS, joint_rotations);
  }
  void add_joint_scales(::flatbuffers::Offset<::flatbuffers::Vector<const liquid::schemas::base::Vec3 *>> joint_scales) {
    fbb_.AddOffset(Skeleton::VT_JOINT_SCALES, joint_scales);
  }
  void add_joint_inverse_bind_matrices(::flatbuffers::Offset<::flatbuffers::Vector<const liquid::schemas::base::Mat4 *>> joint_inverse_bind_matrices) {
    fbb_.AddOffset(Skeleton::VT_JOINT_INVERSE_BIND_MATRICES, joint_inverse_bind_matrices);
  }
  void add_joint_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> joint_names) {
    fbb_.AddOffset(Skeleton::VT_JOINT_NAMES, joint_names);
  }
  explicit SkeletonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Skeleton> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Skeleton>(end);
    fbb_.Required(o, Skeleton::VT_JOINT_PARENTS);
    fbb_.Required(o, Skeleton::VT_JOINT_POSITIONS);
    fbb_.Required(o, Skeleton::VT_JOINT_ROTATIONS);
    fbb_.Required(o, Skeleton::VT_JOINT_SCALES);
    fbb_.Required(o, Skeleton::VT_JOINT_INVERSE_BIND_MATRICES);
    fbb_.Required(o, Skeleton::VT_JOINT_NAMES);
    return o;
  }
};

inline ::flatbuffers::Offset<Skeleton> CreateSkeleton(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> joint_parents = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const liquid::schemas::base::Vec3 *>> joint_positions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const liquid::schemas::base::Quat *>> joint_rotations = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const liquid::schemas::base::Vec3 *>> joint_scales = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const liquid::schemas::base::Mat4 *>> joint_inverse_bind_matrices = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> joint_names = 0) {
  SkeletonBuilder builder_(_fbb);
  builder_.add_joint_names(joint_names);
  builder_.add_joint_inverse_bind_matrices(joint_inverse_bind_matrices);
  builder_.add_joint_scales(joint_scales);
  builder_.add_joint_rotations(joint_rotations);
  builder_.add_joint_positions(joint_positions);
  builder_.add_joint_parents(joint_parents);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Skeleton> CreateSkeletonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *joint_parents = nullptr,
    const std::vector<liquid::schemas::base::Vec3> *joint_positions = nullptr,
    const std::vector<liquid::schemas::base::Quat> *joint_rotations = nullptr,
    const std::vector<liquid::schemas::base::Vec3> *joint_scales = nullptr,
    const std::vector<liquid::schemas::base::Mat4> *joint_inverse_bind_matrices = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *joint_names = nullptr) {
  auto joint_parents__ = joint_parents ? _fbb.CreateVector<uint8_t>(*joint_parents) : 0;
  auto joint_positions__ = joint_positions ? _fbb.CreateVectorOfStructs<liquid::schemas::base::Vec3>(*joint_positions) : 0;
  auto joint_rotations__ = joint_rotations ? _fbb.CreateVectorOfStructs<liquid::schemas::base::Quat>(*joint_rotations) : 0;
  auto joint_scales__ = joint_scales ? _fbb.CreateVectorOfStructs<liquid::schemas::base::Vec3>(*joint_scales) : 0;
  auto joint_inverse_bind_matrices__ = joint_inverse_bind_matrices ? _fbb.CreateVectorOfStructs<liquid::schemas::base::Mat4>(*joint_inverse_bind_matrices) : 0;
  auto joint_names__ = joint_names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*joint_names) : 0;
  return liquid::schemas::asset::CreateSkeleton(
      _fbb,
      joint_parents__,
      joint_positions__,
      joint_rotations__,
      joint_scales__,
      joint_inverse_bind_matrices__,
      joint_names__);
}

inline const liquid::schemas::asset::Skeleton *GetSkeleton(const void *buf) {
  return ::flatbuffers::GetRoot<liquid::schemas::asset::Skeleton>(buf);
}

inline const liquid::schemas::asset::Skeleton *GetSizePrefixedSkeleton(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<liquid::schemas::asset::Skeleton>(buf);
}

inline const char *SkeletonIdentifier() {
  return "LSKL";
}

inline bool SkeletonBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SkeletonIdentifier());
}

inline bool SizePrefixedSkeletonBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SkeletonIdentifier(), true);
}

inline bool VerifySkeletonBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<liquid::schemas::asset::Skeleton>(SkeletonIdentifier());
}

inline bool VerifySizePrefixedSkeletonBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<liquid::schemas::asset::Skeleton>(SkeletonIdentifier());
}

inline void FinishSkeletonBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<liquid::schemas::asset::Skeleton> root) {
  fbb.Finish(root, SkeletonIdentifier());
}

inline void FinishSizePrefixedSkeletonBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<liquid::schemas::asset::Skeleton> root) {
  fbb.FinishSizePrefixed(root, SkeletonIdentifier());
}

}  // namespace asset
}  // namespace schemas
}  // namespace liquid

#endif  // FLATBUFFERS_GENERATED_SKELETON_LIQUID_SCHEMAS_ASSET_H_
